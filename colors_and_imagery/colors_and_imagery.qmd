---
title: Choices in a decoy task
knitr:
  opts_chunk: 
    echo: false
    message: false
    warning: false
    comment: NA
    cache: false
    fig.width: 7
    fig.asp: 0.5
    fig.path: "figures_decoy/"
    dpi: 320
    external: false
    res: 320
    results: "hide"
    split: false 
    tidy: false
    dev: svg
editor_options: 
  chunk_output_type: console
format: 
  html: 
    embed-resources: true
---


```{r setup}
library(httr)
library(apastats)
library(data.table)
library(jsonlite)
library(stringr)
library(knitr)
library(Hmisc)
library(superb)
library(circhelp)

default_font = 'Gill Sans Nova Light'

default_font_size <- 10
default_line_size <- 1/.pt/3.82*4 
default_font_size_mm <- default_font_size/ggplot2:::.pt

default_point_size <- 4*default_line_size

update_geom_defaults("line", list(linewidth = default_line_size))
update_geom_defaults("text", list(size = default_font_size_mm, family = default_font))
update_geom_defaults("segment", list(linewidth = default_line_size))
update_geom_defaults("pointrange", list(linewidth = default_line_size))
update_geom_defaults("vline", list(linewidth = default_line_size, colour = '#AFABAB'))
update_geom_defaults("hline", list(linewidth = default_line_size, colour = '#AFABAB'))
update_geom_defaults('function', list(linewidth = default_line_size))

default_theme<-theme_light(base_size = default_font_size, base_line_size = default_line_size, base_family = default_font)+theme(
  axis.line=element_line(linewidth = I(0.5)), 
  axis.ticks= element_line(linewidth = I(0.25), colour = 'gray'),
  axis.line.x=element_line(),
  axis.line.y=element_line(),
  panel.grid.major = element_blank(), 
  panel.grid.minor = element_blank(),
  legend.title=element_text(size=rel(1)), 
  strip.text=element_text(size=rel(1), colour = 'black'), 
  axis.text=element_text(size=rel(0.9), colour = '#4e4e4e'), 
  axis.title=element_text(size=rel(1), colour = '#4e4e4e'), 
  panel.border= element_blank(),
  strip.background = element_blank(),
  legend.position	='right', 
  legend.key.height = unit(0.7, 'lines'),
  plot.title=element_text(size=rel(1), hjust = 0.5),
  plot.tag.position = c(0,1),
  plot.background = element_blank(),
  text=element_text(size=default_font_size), 
  legend.text=element_text(size=rel(1)), 
  axis.line.x.bottom = element_blank(), 
  axis.line.y.left = element_blank(),
  axis.line.x.top = element_blank(),
  axis.line.y.right = element_blank())
theme_set(default_theme)

default_colors <-c('#3498db','#009f06','#FF7F00', '#7A378B','#f72034')
scale_colour_discrete <- function(...) scale_colour_manual(values=default_colors, ...)
scale_fill_discrete <- function(...) scale_fill_manual(values=default_colors, ...)
scale_shape_discrete <- function(...) scale_shape_manual(values = c(16,21,17, 22), ...)


headers = c(
  `Authorization` = sprintf("Bearer %s", Sys.getenv("JATOS_TOKEN"))
)

jatos_url <- 'https://jatos.mindprobe.eu/jatos/api/v1/'

randstring <- function(n = 5000) {
  a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
  paste0(a, sprintf("%04d", sample(9999, n, TRUE)), sample(LETTERS, n, TRUE))
}

data_list <- list()
study_uid <- Sys.getenv('JATOS_COLORS_AND_IMAGERY_STUDY_UID')

temp_dir <- tempdir(check = T)
temp_dir <- gsub('\\\\', '/', temp_dir)
temp_dir <- paste(temp_dir, randstring(1), sep = '/')
res_file <- paste0(tempfile(),'.zip')

url <-  sprintf("%sresults?studyUuid=%s", jatos_url, study_uid)
system(sprintf('curl -i -H "Authorization: %s" %s --output "%s"', headers[['Authorization']], url, res_file))
unzip(res_file, exdir=temp_dir)  # unzip your file

metadata <- jsonlite::fromJSON(list.files(temp_dir, '*.json', full.names = T, recursive = T))$data$studyResults[[1]]

finished_study_ids <- metadata[,c('id', "endDate", "startDate")]
setDT(finished_study_ids)
finished_study_ids[,id:=as.character(id)]
finished_study_ids[,endDate:=as.POSIXct(endDate/1000, origin="1970-01-01")]
finished_study_ids[,startDate:=as.POSIXct(startDate/1000, origin="1970-01-01")]
finished_study_ids <- finished_study_ids[!is.na(endDate)] 
comp_res_meta <- rbindlist(lapply(1:length(metadata$componentResults), \(x) {
  dt <- as.data.table(metadata$componentResults[[x]])
  dt
}), fill = T)
comp_res_meta[componentId=='29868'] # vviq
flist <- list.files(temp_dir, '*.txt', full.names = T, recursive = T)
flist <- flist[str_extract(flist,'study_result_(\\d+)', group = 1)%in%finished_study_ids$id]
flist_vviq <- flist[str_extract(flist,'comp-result_(\\d+)', group = 1)%in%comp_res_meta[componentId=='29868',id]]
flist_colors <- flist[str_extract(flist,'comp-result_(\\d+)', group = 1)%in%comp_res_meta[componentId!='29868',id]]

data_vviq <- rbindlist(lapply(c(flist_vviq), \(x){
  data <- read_json(x)
  data.table(participant = str_extract(x, 'study_result_(\\d+)', group = 1),
             vviq = sum(sapply(data,\(q) ifelse(length(q$response)==4, do.call(sum, q$response), 0))))
}))

data_color <- suppressWarnings(rbindlist(lapply(c(flist_colors), \(x){
  # print(x)
  comp_res_id <- str_extract(x, '(?<=comp-result_)\\d{6}')
  data <- read_json(x)
  if (length(data)<10){
    return(data.frame())
  }
  browser_check <- data.frame(data[[1]])
  setDT(browser_check)
  
  data <- data[sapply(data, \(x) x$trial_type=='psychophysics')]
  data <- rbindlist(data, fill = T)
  if ('score' %nin% colnames(data)){
    return(data.frame())
  }

    
  data[,score:=as.numeric(score)]
  data[!is.na(left_colors), left_sd:=circ_sd_360(as.numeric(str_split(left_colors,',', simplify = T))), by = left_colors]
  data[!is.na(right_colors), right_sd:=circ_sd_360(as.numeric(str_split(right_colors,',', simplify = T))), by = right_colors]
  data[,left_colors:=NULL]
  data[,right_colors:=NULL]
  setnafill(data, type = "locf",cols = c('target_color','distr_color','left_color','right_color','target_sd', 'distr_sd', 'target_x', 'distr_x', 'similarity_bin', 'color_bin','left_sd','right_sd','cue_pos','cued_color','cue_n'))
  setnafill(data, type = "nocb",cols = c('score'))
  #
  if (browser_check[1, .(trial_type)]=='browser-check'){
    data[,c('window_width','window_height'):=browser_check[,.(width, height)]]
  }
  data<-data[trial_type=='psychophysics'&seq_type=='response']

  data[,participant:=str_extract(x, 'study_result_(\\d+)', group = 1)]
  data[,result_id:=str_extract(x, 'comp-result_(\\d+)', group = 1)]
  data <- merge(data, finished_study_ids, by.x = 'participant', by.y = 'id')
  
  data
  
}), fill = T))

unlink(paste0(temp_dir, "/*"))

data_color[,participant:=as.numeric(factor(participant, levels = sample(unique(data_color$participant)), labels = 1:length(unique(data_color$participant))))]
data_color <- merge(data_color, data_vviq, by = 'participant')
data_color[,c('startDate','endDate','result_id','participant','avg_frame_time'):=NULL]

setnafill(data_color, type = "locf", cols = c('window_height','window_width'))
drop.empty.cols(data_color)
data_color <- data_color[, lapply(.SD, function(col) if (!all(na.omit(col == col[1]))) col else NULL)]
```

```{r}

setnames(data_color,c('target_sd','distr_sd'), c('target_noise','distr_noise'), skip_absent = T)
data_color[,abs_err:=abs(error)]

data_color[cue_pos!=target_x, c('target_noise','distr_noise'):=.(distr_noise, target_noise)]
data_color[cue_pos!=target_x, c('target_color','distr_color'):=.(distr_color, target_color)]
data_color[,target_noise:=factor(target_noise, levels = c(5, 20), labels = c('low','high'))]
data_color[,target_sample_sd:=ifelse(cue_pos<0, left_sd, right_sd)]
data_color[,distr_sample_sd:=ifelse(cue_pos>0, left_sd, right_sd)]
data_color[,distr_noise:=factor(distr_noise, levels = c(5, 20), labels = c('low','high'))]
data_color[,td_dist:=angle_diff_360(distr_color, target_color)]

data_color[,bias_distr:= sign(td_dist)*error]
data_color[,distr_color:=angle_diff_360(distr_color,0)]
data_color <- unique(data_color)
data_color[!is.na(error),n_by_subj:=.N, by = participant]
data_color[!is.na(error),n_by_block:=.N, by = .(block, participant)]

data_color[, abs_td_dist:=abs(td_dist)]
data_color[,target_color:=angle_diff_360(target_color, 0)]
data_color[,similarity_binf:=factor(similarity_bin)]
data_color[,noise:=interaction(target_noise, distr_noise, sep = ' - ')]
data_color[,.(totalN = .N, circ_sd = circ_sd_360(error, na.rm = T),n_by_subj[1], missed_responses = sum(is.na(error))), keyby = .(participant)]
data_color[,.(.N, circ_sd = circ_sd_360(error, na.rm = T), mean_abs_err= mean.nn(abs_err)), keyby = .(  participant)]

#outliers 
data_color<-data_color[participant%nin%data_color[,.(.N, circ_sd_360(error, na.rm = T)), by = participant][V2>60|N<500, participant]]

plot.pointrange(data_color[!is.na(abs_err)], aes(x = participant, y = abs_err, color = noise), within_subj = F, wid ='participant', withinvars = c('cue_n','noise'), do_aggregate = F)+
  facet_grid(.~cue_n)+coord_flip()

plot.pointrange(data_color, aes(x = noise, y = abs_err, color = noise), 
                within_subj = T, wid ='participant', withinvars = c('cue_n','noise'))+
  facet_grid(.~cue_n)

data_color[,subject:=paste0('S',as.numeric(as.factor(participant)))]
data_color[,subject:=naturalsort::naturalfactor(subject)]

data_color[,.(.N, circ_sd_360(error, na.rm = T)), by = participant]
db_res <- lapply(split(data_color[!is.na(error),], by = c('participant', 'cue_n')), \(dt){
  dt[,c('be_c','is_outlier','rc_pred','rc_group','shifted_td_dist','mad_outlier'):=remove_cardinal_biases_discrete(error, similarity_bin, space = 360)[,c('be_c','is_outlier')], by = .(participant, cue_n)]
  dt
})

data_color <- rbindlist(db_res)
data_color[is_outlier==F&abs_err>90, is_outlier:=T]
data_color[,.(.N, circ_sd = circ_sd_360(error, na.rm = T),circ_sd_correct = circ_sd_360(error, na.rm = T), n_by_subj=n_by_subj[1], n_nonmissing=sum(!is.na(error)), share_outliers= mean.nn(is_outlier), mean_abs_err= mean.nn(abs_err)), keyby = .(participant)]

data_color[,bias_to_distr_corr:=sign(td_dist)*be_c]
data_color[,bias_to_distr_raw:=sign(td_dist)*error]

data_color[,abs_be_c:=abs(be_c)]
data_color[,avg_abs_err:=mean.nn(abs(be_c)), by = participant]
data_color[,noise_equal:=factor(distr_noise==target_noise, levels = c(F, T), labels = c('Unequal noise', 'Equal noise'))]
data_color[,bias_distr:=NULL]
saveRDS(data_color, 'data_color_fd_2r_debiased.rds')

data_color <- readRDS('data_color_fd_2r_debiased.rds')
data_color[,similarity_binf:=factor(similarity_bin)]
names(data_color)

# biases plot
ggplot(data_color[is_outlier==F], aes(x = similarity_bin, y = bias_to_distr_corr, color = factor(target_noise)))+stat_summary(binwidth = 30, position = position_dodge(width = 0), show.legend = FALSE )+stat_summary(geom='line', binwidth = 30, position = position_dodge(width = 0))+facet_grid(noise_equal~.)+theme(panel.grid.major.x = element_blank(),panel.grid.minor.x = element_blank())+geom_hline(yintercept = 0, linetype = 2)+scale_x_continuous(breaks = unique(data_color$similarity_bin))

```

```{r}
data_color[,.(bias_by_block=mean.nn(bias_to_distr_corr), by = .(participant, block, vviq))]
```